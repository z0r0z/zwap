{"language":"Solidity","sources":{"src/ZwapUSDC.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.26;\n\n/// @notice Swap ETH to USDC and make payments.\ncontract ZwapUSDC {\n    address constant POOL = 0x88e6A0c2dDD26FEEb64F039a2c41296FcB3f5640;\n    address constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n    address constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    uint160 constant MAX_SQRT_RATIO_MINUS_ONE = 1461446703485210103287273052203988822378723970341;\n\n    constructor() payable {}\n\n    receive() external payable {\n        zwap(msg.sender, int256(msg.value));\n    }\n\n    function zwap(address to, int256 amount) public payable {\n        assembly (\"memory-safe\") {\n            if iszero(amount) { amount := callvalue() }\n        }\n        ISwap(POOL).swap(to, false, amount, MAX_SQRT_RATIO_MINUS_ONE, \"\");\n        _repay(address(this).balance);\n    }\n\n    fallback() external payable {\n        assembly (\"memory-safe\") {\n            let amount1Delta := calldataload(0x24)\n            pop(call(gas(), WETH, amount1Delta, codesize(), 0x00, codesize(), 0x00))\n            mstore(0x00, 0xa9059cbb000000000000000000000000)\n            mstore(0x14, POOL)\n            mstore(0x34, amount1Delta)\n            pop(call(gas(), WETH, 0, 0x10, 0x44, codesize(), 0x00))\n        }\n    }\n\n    function _repay(uint256 dust) internal {\n        assembly (\"memory-safe\") {\n            if dust { pop(call(gas(), caller(), dust, codesize(), 0x00, codesize(), 0x00)) }\n        }\n    }\n\n    struct Drop {\n        address to;\n        uint256 amount;\n    }\n\n    function zwapDrop(Drop[] calldata drops, uint256 sum) public payable {\n        zwap(address(this), -int256(sum));\n        for (uint256 i; i != drops.length; ++i) {\n            _transfer(drops[i].to, drops[i].amount);\n        }\n    }\n\n    function _transfer(address to, uint256 amount) internal {\n        assembly (\"memory-safe\") {\n            mstore(0x00, 0xa9059cbb000000000000000000000000)\n            mstore(0x14, to)\n            mstore(0x34, amount)\n            pop(call(gas(), USDC, 0, 0x10, 0x44, codesize(), 0x00))\n        }\n    }\n}\n\n/// @dev Minimal Uniswap V3 swap interface.\ninterface ISwap {\n    function swap(address, bool, int256, uint160, bytes calldata)\n        external\n        returns (int256, int256);\n}\n"}},"settings":{"remappings":["@solady/=lib/solady/","@forge/=lib/forge-std/src/","forge-std/=lib/forge-std/src/","solady/=lib/solady/src/"],"optimizer":{"enabled":true,"runs":9999999},"metadata":{"useLiteralContent":false,"bytecodeHash":"ipfs","appendCBOR":true},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]}},"evmVersion":"cancun","viaIR":false,"libraries":{}}}
